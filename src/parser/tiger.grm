fun 3 = x;
%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | UMINUS
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE
  | LOWER_THAN_ELSE

%nonterm  
exp 
| program 
| decs | dec | tydec | vardec | fundec
        | typeid | ty | tyfields | lvalue | expseq | args
        | recfields 

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
        DO OF NIL

%prefer THEN ELSE LPAREN

%right OFPa
%nonassoc FUNCTION VAR TYPE THEN DO ASSIGN
%nonassoc LOWER_THAN_ELSE
%nonassoc ELSE
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp ()

decs :             ()
     | dec decs    ()

dec : tydec  ()
    | vardec ()
    | fundec ()

tydec : TYPE ID EQ ty ()

ty : ID                     ()
   | LBRACE tyfields RBRACE ()
   | ARRAY OF ID            ()

tyfields :                            ()
         | ID COLON ID                ()
         | ID COLON ID COMMA tyfields ()

vardec : VAR ID ASSIGN exp          ()
       | VAR ID COLON ID ASSIGN exp ()

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp          ()
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ()

lvalue : ID ()
       | ID LBRACK exp RBRACK ()
       | lvalue LBRACK exp RBRACK ()
       | lvalue DOT ID           ()


exp : lvalue                                ()
    | lvalue ASSIGN exp                     ()
    | NIL                                   ()
    | INT                                   ()
    | STRING                                ()
    | LPAREN expseq RPAREN                  ()
    | MINUS exp %prec UMINUS                ()
    | ID LPAREN args RPAREN                 ()
    | exp PLUS exp                          ()
    | exp TIMES exp                         ()
    | exp MINUS exp                         ()
    | exp DIVIDE exp                        ()
    | exp EQ exp                            ()
    | exp NEQ exp                           ()
    | exp LT exp                            ()
    | exp LE exp                            ()
    | exp GT exp                            ()
    | exp GE exp                            ()
    | exp AND exp                           ()
    | exp OR exp                            ()
    | ID LBRACE recfields RBRACE            ()
    | ID LBRACK exp RBRACK OF exp           ()
    | IF exp THEN exp ELSE exp              ()
    | IF exp THEN exp %prec LOWER_THAN_ELSE ()
    | WHILE exp DO exp                      ()
    | FOR ID ASSIGN exp TO exp DO exp       ()
    | BREAK                                 ()
    | LET decs IN expseq END                ()

expseq :                       ()
       | exp                   ()
       | exp SEMICOLON expseq  ()

recfields :                           ()
          | ID EQ exp                 ()
          | ID EQ exp COMMA recfields ()
