functor TigerLexFun (structure Tokens: Tiger_TOKENS)  = struct

    structure yyInput : sig

        type stream
	val mkStream : (int -> string) -> stream
	val fromStream : TextIO.StreamIO.instream -> stream
	val getc : stream -> (Char.char * stream) option
	val getpos : stream -> int
	val getlineNo : stream -> int
	val subtract : stream * stream -> string
	val eof : stream -> bool
	val lastWasNL : stream -> bool

      end = struct

        structure TIO = TextIO
        structure TSIO = TIO.StreamIO
	structure TPIO = TextPrimIO

        datatype stream = Stream of {
            strm : TSIO.instream,
	    id : int,  (* track which streams originated 
			* from the same stream *)
	    pos : int,
	    lineNo : int,
	    lastWasNL : bool
          }

	local
	  val next = ref 0
	in
	fun nextId() = !next before (next := !next + 1)
	end

	val initPos = 2 (* ml-lex bug compatibility *)

	fun mkStream inputN = let
              val strm = TSIO.mkInstream 
			   (TPIO.RD {
			        name = "lexgen",
				chunkSize = 4096,
				readVec = SOME inputN,
				readArr = NONE,
				readVecNB = NONE,
				readArrNB = NONE,
				block = NONE,
				canInput = NONE,
				avail = (fn () => NONE),
				getPos = NONE,
				setPos = NONE,
				endPos = NONE,
				verifyPos = NONE,
				close = (fn () => ()),
				ioDesc = NONE
			      }, "")
	      in 
		Stream {strm = strm, id = nextId(), pos = initPos, lineNo = 1,
			lastWasNL = true}
	      end

	fun fromStream strm = Stream {
		strm = strm, id = nextId(), pos = initPos, lineNo = 1, lastWasNL = true
	      }

	fun getc (Stream {strm, pos, id, lineNo, ...}) = (case TSIO.input1 strm
              of NONE => NONE
	       | SOME (c, strm') => 
		   SOME (c, Stream {
			        strm = strm', 
				pos = pos+1, 
				id = id,
				lineNo = lineNo + 
					 (if c = #"\n" then 1 else 0),
				lastWasNL = (c = #"\n")
			      })
	     (* end case*))

	fun getpos (Stream {pos, ...}) = pos

	fun getlineNo (Stream {lineNo, ...}) = lineNo

	fun subtract (new, old) = let
	      val Stream {strm = strm, pos = oldPos, id = oldId, ...} = old
	      val Stream {pos = newPos, id = newId, ...} = new
              val (diff, _) = if newId = oldId andalso newPos >= oldPos
			      then TSIO.inputN (strm, newPos - oldPos)
			      else raise Fail 
				"BUG: yyInput: attempted to subtract incompatible streams"
	      in 
		diff 
	      end

	fun eof s = not (isSome (getc s))

	fun lastWasNL (Stream {lastWasNL, ...}) = lastWasNL

      end

    datatype yystart_state = 
INITIAL | ESCAPE | STRING | COMMENT | REM
    structure UserDeclarations = 
      struct

(*******************************************************************************
 * File:        tiger.lex
 * Authors:     Jake Derry, Radu Vasilescu
 * 
 * Description: Provides the ML-Lex configuration for the Tiger lexer.
 ******************************************************************************)

(* ===== Shortcuts ===== *)

type pos = int
(* type lexresult = Tokens.token *)

(* Shortcut function to calculate the start and end positions of a token *)
fun s_e pos text = (pos, pos + String.size text)



(* ===== Globals ===== *)

(* Efficiently count line numbers. *)
val lineNum = ErrorMsg.lineNum
val linePos = ErrorMsg.linePos

val inComment = ref false

fun err (p1, p2) = ErrorMsg.error p1



(* ===== String literals ===== *)

(* This value keeps track of the string literal being parsed so far. *)
val currentString = ref ""



(* ===== EOF Handler ===== *)

(* Deals with reaching the end of file. *)
fun eof () = 
  let val pos = hd (!linePos) 
  in  case (!currentString, !inComment)
        of ("", false) => Tokens.EOF (pos, pos)
         | ("", true)  => (ErrorMsg.error pos 
                                          ("Expected end of comment, \
                                          \ found EOF");
                           Tokens.EOF (pos, pos))
         | (_,  _)     => (ErrorMsg.error pos 
                                          ("Expected end of string, \
                                          \ found EOF");
                           Tokens.EOF (pos, pos))
  end




(* Added from textbook page 82: *)
type svalue = Tokens.svalue
type pos = int
type ('a, 'b) token = ('a, 'b) Tokens.token
type lexresult = (svalue, pos) token



(* If you're wondering why there's an unused "REM" state, 
   it's so we can use comments in the lexer definitions below
   the [double %]... It's a dirty hack but  *shrug*  *)



      end

    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of yyInput.stream * action * yymatch
    withtype action = yyInput.stream * yymatch -> UserDeclarations.lexresult

    local

    val yytable = 
#[([(#"\^@",#"\b",5),
(#"\v",#"\f",5),
(#"\^N",#"\^_",5),
(#"!",#"!",5),
(#"#",#"%",5),
(#"'",#"'",5),
(#"?",#"@",5),
(#"\\",#"\\",5),
(#"^",#"`",5),
(#"~",#"\255",5),
(#"\t",#"\t",6),
(#"\r",#"\r",6),
(#" ",#" ",6),
(#"\n",#"\n",7),
(#"\"",#"\"",8),
(#"&",#"&",9),
(#"(",#"(",10),
(#")",#")",11),
(#"*",#"*",12),
(#"+",#"+",13),
(#",",#",",14),
(#"-",#"-",15),
(#".",#".",16),
(#"/",#"/",17),
(#"0",#"9",18),
(#":",#":",19),
(#";",#";",20),
(#"<",#"<",21),
(#"=",#"=",22),
(#">",#">",23),
(#"A",#"Z",24),
(#"c",#"c",24),
(#"g",#"h",24),
(#"j",#"k",24),
(#"m",#"m",24),
(#"p",#"s",24),
(#"u",#"u",24),
(#"x",#"z",24),
(#"[",#"[",25),
(#"]",#"]",26),
(#"a",#"a",27),
(#"b",#"b",28),
(#"d",#"d",29),
(#"e",#"e",30),
(#"f",#"f",31),
(#"i",#"i",32),
(#"l",#"l",33),
(#"n",#"n",34),
(#"o",#"o",35),
(#"t",#"t",36),
(#"v",#"v",37),
(#"w",#"w",38),
(#"{",#"{",39),
(#"|",#"|",40),
(#"}",#"}",41)], []), ([(#"\^@",#"\b",5),
(#"\v",#"\f",5),
(#"\^N",#"\^_",5),
(#"!",#"!",5),
(#"#",#"/",5),
(#":",#"[",5),
(#"]",#"]",5),
(#"_",#"e",5),
(#"g",#"m",5),
(#"o",#"s",5),
(#"u",#"\255",5),
(#"\t",#"\t",92),
(#"\r",#"\r",92),
(#" ",#" ",92),
(#"\n",#"\n",93),
(#"\"",#"\"",94),
(#"0",#"9",95),
(#"\\",#"\\",96),
(#"^",#"^",97),
(#"f",#"f",98),
(#"n",#"n",99),
(#"t",#"t",100)], []), ([(#"\^@",#"\b",106),
(#"\v",#"\f",106),
(#"\^N",#"\^_",106),
(#"!",#"!",106),
(#"#",#"[",106),
(#"]",#"\255",106),
(#"\t",#"\t",107),
(#"\r",#"\r",107),
(#" ",#" ",107),
(#"\n",#"\n",108),
(#"\"",#"\"",109),
(#"\\",#"\\",110)], []), ([(#"\^@",#"\b",112),
(#"\v",#"\f",112),
(#"\^N",#"\^_",112),
(#"!",#")",112),
(#"+",#"\255",112),
(#"\t",#"\t",113),
(#"\r",#"\r",113),
(#" ",#" ",113),
(#"\n",#"\n",7),
(#"*",#"*",114)], []), ([(#"\^@",#"\b",5),
(#"\v",#"\f",5),
(#"\^N",#"\^_",5),
(#"!",#"<",5),
(#">",#"@",5),
(#"D",#"D",5),
(#"G",#"H",5),
(#"K",#"O",5),
(#"Q",#"V",5),
(#"X",#"`",5),
(#"b",#"r",5),
(#"t",#"v",5),
(#"x",#"\255",5),
(#"\t",#"\t",6),
(#"\r",#"\r",6),
(#" ",#" ",6),
(#"\n",#"\n",7),
(#"=",#"=",116),
(#"A",#"A",117),
(#"B",#"B",118),
(#"C",#"C",119),
(#"E",#"E",120),
(#"F",#"F",121),
(#"I",#"I",122),
(#"J",#"J",123),
(#"P",#"P",124),
(#"W",#"W",125),
(#"a",#"a",126),
(#"s",#"s",127),
(#"w",#"w",128)], []), ([], [104]), ([], [6, 104]), ([], [4]), ([], [78, 104]), ([], [43, 104]), ([], [64, 104]), ([], [65, 104]), ([], [53, 104]), ([], [55, 104]), ([], [71, 104]), ([], [54, 104]), ([], [56, 104]), ([(#"*",#"*",91)], [52, 104]), ([(#"0",#"9",90)], [76, 104]), ([(#"=",#"=",89)], [70, 104]), ([], [69, 104]), ([(#"=",#"=",87),
(#">",#">",88)], [48, 104]), ([], [50, 104]), ([(#"=",#"=",86)], [46, 104]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [99, 104]), ([], [62, 104]), ([], [63, 104]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"q",42),
(#"s",#"z",42),
(#"r",#"r",82)], [99, 104]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"q",42),
(#"s",#"z",42),
(#"r",#"r",78)], [99, 104]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"n",42),
(#"p",#"z",42),
(#"o",#"o",77)], [99, 104]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"k",42),
(#"m",#"m",42),
(#"o",#"z",42),
(#"l",#"l",72),
(#"n",#"n",73)], [99, 104]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"n",42),
(#"p",#"t",42),
(#"v",#"z",42),
(#"o",#"o",63),
(#"u",#"u",64)], [99, 104]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"e",42),
(#"g",#"m",42),
(#"o",#"z",42),
(#"f",#"f",61),
(#"n",#"n",62)], [99, 104]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",59)], [99, 104]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"h",42),
(#"j",#"z",42),
(#"i",#"i",57)], [99, 104]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"e",42),
(#"g",#"z",42),
(#"f",#"f",56)], [99, 104]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"g",42),
(#"i",#"n",42),
(#"p",#"x",42),
(#"z",#"z",42),
(#"h",#"h",49),
(#"o",#"o",50),
(#"y",#"y",51)], [99, 104]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"b",#"z",42),
(#"a",#"a",47)], [99, 104]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"g",42),
(#"i",#"z",42),
(#"h",#"h",43)], [99, 104]), ([], [60, 104]), ([], [42, 104]), ([], [61, 104]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"h",42),
(#"j",#"z",42),
(#"i",#"i",44)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"k",42),
(#"m",#"z",42),
(#"l",#"l",45)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",46)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [19, 99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"q",42),
(#"s",#"z",42),
(#"r",#"r",48)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [27, 99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",54)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [21, 99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"o",42),
(#"q",#"z",42),
(#"p",#"p",52)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",53)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [28, 99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"m",42),
(#"o",#"z",42),
(#"n",#"n",55)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [31, 99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [34, 99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"k",42),
(#"m",#"z",42),
(#"l",#"l",58)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [35, 99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"s",42),
(#"u",#"z",42),
(#"t",#"t",60)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [23, 99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [30, 99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [24, 99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"q",42),
(#"s",#"z",42),
(#"r",#"r",71)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"m",42),
(#"o",#"z",42),
(#"n",#"n",65)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"b",42),
(#"d",#"z",42),
(#"c",#"c",66)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"s",42),
(#"u",#"z",42),
(#"t",#"t",67)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"h",42),
(#"j",#"z",42),
(#"i",#"i",68)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"n",42),
(#"p",#"z",42),
(#"o",#"o",69)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"m",42),
(#"o",#"z",42),
(#"n",#"n",70)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [26, 99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [20, 99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"r",42),
(#"t",#"z",42),
(#"s",#"s",75)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"c",42),
(#"e",#"z",42),
(#"d",#"d",74)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [25, 99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",76)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [32, 99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [33, 99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",79)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"b",#"z",42),
(#"a",#"a",80)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"j",42),
(#"l",#"z",42),
(#"k",#"k",81)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [22, 99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"q",42),
(#"s",#"z",42),
(#"r",#"r",83)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"b",#"z",42),
(#"a",#"a",84)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"x",42),
(#"z",#"z",42),
(#"y",#"y",85)], [99]), ([(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [29, 99]), ([], [45]), ([], [47]), ([], [49]), ([], [40]), ([(#"0",#"9",90)], [76]), ([], [11]), ([(#"\t",#"\n",101),
(#"\r",#"\r",101),
(#" ",#" ",101),
(#"f",#"f",101),
(#"\\",#"\\",102)], [6, 104]), ([(#"\t",#"\n",101),
(#"\r",#"\r",101),
(#" ",#" ",101),
(#"f",#"f",101),
(#"\\",#"\\",102)], [4]), ([], [89, 104]), ([(#"0",#"9",104)], [104]), ([], [90, 104]), ([(#"?",#"_",103)], [104]), ([(#"\t",#"\n",101),
(#"\r",#"\r",101),
(#" ",#" ",101),
(#"f",#"f",101),
(#"\\",#"\\",102)], [104]), ([], [86, 104]), ([], [87, 104]), ([(#"\t",#"\n",101),
(#"\r",#"\r",101),
(#" ",#" ",101),
(#"f",#"f",101),
(#"\\",#"\\",102)], []), ([], [91]), ([], [92]), ([(#"0",#"9",105)], []), ([], [88]), ([(#"\^@",#"!",111),
(#"#",#"[",111),
(#"]",#"\255",111)], [81, 104]), ([(#"\^@",#"!",111),
(#"#",#"[",111),
(#"]",#"\255",111)], [6, 81, 104]), ([(#"\^@",#"!",111),
(#"#",#"[",111),
(#"]",#"\255",111)], [4, 81]), ([], [95, 104]), ([], [84, 104]), ([(#"\^@",#"!",111),
(#"#",#"[",111),
(#"]",#"\255",111)], [81]), ([], [15, 104]), ([], [6, 15, 104]), ([(#"/",#"/",115)], [15, 104]), ([], [13]), ([(#"=",#"=",655)], [104]), ([(#"d",#"d",585),
(#"r",#"r",586),
(#"s",#"s",587)], [104]), ([(#"o",#"o",579)], [104]), ([(#"o",#"o",554)], [104]), ([(#"n",#"n",477),
(#"q",#"q",478),
(#"x",#"x",479)], [104]), ([(#"o",#"o",451)], [104]), ([(#"g",#"g",406)], [104]), ([(#"u",#"u",380)], [104]), ([(#"a",#"a",339)], [104]), ([(#"h",#"h",215)], [104]), ([(#"n",#"n",189)], [104]), ([(#"e",#"e",180)], [104]), ([(#"e",#"e",129)], [104]), ([(#" ",#" ",130)], []), ([(#"a",#"a",131)], []), ([(#"p",#"p",132)], []), ([(#"p",#"p",133)], []), ([(#"e",#"e",134)], []), ([(#"n",#"n",135)], []), ([(#"d",#"d",136)], []), ([(#" ",#" ",137)], []), ([(#"i",#"i",138)], []), ([(#"t",#"t",139)], []), ([(#" ",#" ",140)], []), ([(#"t",#"t",141)], []), ([(#"o",#"o",142)], []), ([(#" ",#" ",143)], []), ([(#"t",#"t",144)], []), ([(#"h",#"h",145)], []), ([(#"e",#"e",146)], []), ([(#" ",#" ",147)], []), ([(#"c",#"c",148)], []), ([(#"u",#"u",149)], []), ([(#"r",#"r",150)], []), ([(#"r",#"r",151)], []), ([(#"e",#"e",152)], []), ([(#"n",#"n",153)], []), ([(#"t",#"t",154)], []), ([(#"l",#"l",155)], []), ([(#"y",#"y",156)], []), ([(#" ",#" ",157)], []), ([(#"b",#"b",158)], []), ([(#"e",#"e",159)], []), ([(#"i",#"i",160)], []), ([(#"n",#"n",161)], []), ([(#"g",#"g",162)], []), ([(#" ",#" ",163)], []), ([(#"b",#"b",164)], []), ([(#"u",#"u",165)], []), ([(#"i",#"i",166)], []), ([(#"l",#"l",167)], []), ([(#"t",#"t",168)], []), ([(#" ",#" ",169)], []), ([(#"s",#"s",170)], []), ([(#"t",#"t",171)], []), ([(#"r",#"r",172)], []), ([(#"i",#"i",173)], []), ([(#"n",#"n",174)], []), ([(#"g",#"g",175)], []), ([(#" ",#" ",176)], []), ([(#"v",#"v",177)], []), ([(#"a",#"a",178)], []), ([(#"r",#"r",179)], []), ([], [80]), ([(#"q",#"q",181)], []), ([(#"u",#"u",182)], []), ([(#"e",#"e",183)], []), ([(#"n",#"n",184)], []), ([(#"c",#"c",185)], []), ([(#"e",#"e",186)], []), ([(#"s",#"s",187)], []), ([(#".",#".",188)], []), ([], [83]), ([(#"d",#"d",190)], []), ([(#" ",#" ",191)], []), ([(#"c",#"c",192)], []), ([(#"r",#"r",193)], []), ([(#"e",#"e",194)], []), ([(#"a",#"a",195)], []), ([(#"t",#"t",196)], []), ([(#"e",#"e",197)], []), ([(#" ",#" ",198)], []), ([(#"t",#"t",199)], []), ([(#"h",#"h",200)], []), ([(#"e",#"e",201)], []), ([(#" ",#" ",202)], []), ([(#"s",#"s",203)], []), ([(#"t",#"t",204)], []), ([(#"r",#"r",205)], []), ([(#"i",#"i",206)], []), ([(#"n",#"n",207)], []), ([(#"g",#"g",208)], []), ([(#" ",#" ",209)], []), ([(#"t",#"t",210)], []), ([(#"o",#"o",211)], []), ([(#"k",#"k",212)], []), ([(#"e",#"e",213)], []), ([(#"n",#"n",214)], []), ([], [94]), ([(#"e",#"e",216)], []), ([(#"n",#"n",217)], []), ([(#" ",#" ",218)], []), ([(#"w",#"w",219)], []), ([(#"e",#"e",220)], []), ([(#" ",#" ",221)], []), ([(#"s",#"s",222)], []), ([(#"e",#"e",223)], []), ([(#"e",#"e",224)], []), ([(#" ",#" ",225)], []), ([(#"a",#"a",226)], []), ([(#" ",#" ",227),
(#"n",#"n",228)], []), ([(#"q",#"q",270)], []), ([(#"y",#"y",229)], []), ([(#"t",#"t",230)], []), ([(#"h",#"h",231)], []), ([(#"i",#"i",232)], []), ([(#"n",#"n",233)], []), ([(#"g",#"g",234)], []), ([(#" ",#" ",235)], []), ([(#"o",#"o",236)], []), ([(#"t",#"t",237)], []), ([(#"h",#"h",238)], []), ([(#"e",#"e",239)], []), ([(#"r",#"r",240)], []), ([(#" ",#" ",241)], []), ([(#"t",#"t",242)], []), ([(#"h",#"h",243)], []), ([(#"a",#"a",244)], []), ([(#"n",#"n",245)], []), ([(#" ",#" ",246)], []), ([(#"a",#"a",247)], []), ([(#" ",#" ",248)], []), ([(#"q",#"q",249)], []), ([(#"u",#"u",250)], []), ([(#"o",#"o",251)], []), ([(#"t",#"t",252)], []), ([(#"e",#"e",253)], []), ([(#" ",#" ",254)], []), ([(#"i",#"i",255)], []), ([(#"n",#"n",256)], []), ([(#"s",#"s",257)], []), ([(#"i",#"i",258)], []), ([(#"d",#"d",259)], []), ([(#"e",#"e",260)], []), ([(#" ",#" ",261)], []), ([(#"a",#"a",262)], []), ([(#" ",#" ",263)], []), ([(#"s",#"s",264)], []), ([(#"t",#"t",265)], []), ([(#"r",#"r",266)], []), ([(#"i",#"i",267)], []), ([(#"n",#"n",268)], []), ([(#"g",#"g",269)], []), ([], [79]), ([(#"u",#"u",271)], []), ([(#"o",#"o",272)], []), ([(#"t",#"t",273)], []), ([(#"e",#"e",274)], []), ([(#" ",#" ",275)], []), ([(#"i",#"i",276)], []), ([(#"n",#"n",277)], []), ([(#" ",#" ",278)], []), ([(#"I",#"I",279),
(#"S",#"S",280)], []), ([(#"N",#"N",308)], []), ([(#"T",#"T",281)], []), ([(#"R",#"R",282)], []), ([(#"I",#"I",283)], []), ([(#"N",#"N",284)], []), ([(#"G",#"G",285)], []), ([(#",",#",",286)], []), ([(#" ",#" ",287)], []), ([(#"e",#"e",288)], []), ([(#"n",#"n",289)], []), ([(#"d",#"d",290)], []), ([(#" ",#" ",291)], []), ([(#"a",#"a",292)], []), ([(#" ",#" ",293)], []), ([(#"s",#"s",294)], []), ([(#"t",#"t",295)], []), ([(#"r",#"r",296)], []), ([(#"i",#"i",297)], []), ([(#"n",#"n",298)], []), ([(#"g",#"g",299)], []), ([(#" ",#" ",300)], []), ([(#"l",#"l",301)], []), ([(#"i",#"i",302)], []), ([(#"t",#"t",303)], []), ([(#"e",#"e",304)], []), ([(#"r",#"r",305)], []), ([(#"a",#"a",306)], []), ([(#"l",#"l",307)], []), ([], [93]), ([(#"I",#"I",309)], []), ([(#"T",#"T",310)], []), ([(#"I",#"I",311)], []), ([(#"A",#"A",312)], []), ([(#"L",#"L",313)], []), ([(#",",#",",314)], []), ([(#" ",#" ",315)], []), ([(#"b",#"b",316)], []), ([(#"e",#"e",317)], []), ([(#"g",#"g",318)], []), ([(#"i",#"i",319)], []), ([(#"n",#"n",320)], []), ([(#" ",#" ",321)], []), ([(#"a",#"a",322)], []), ([(#" ",#" ",323)], []), ([(#"s",#"s",324)], []), ([(#"t",#"t",325)], []), ([(#"r",#"r",326)], []), ([(#"i",#"i",327)], []), ([(#"n",#"n",328)], []), ([(#"g",#"g",329)], []), ([(#" ",#" ",330)], []), ([(#"l",#"l",331)], []), ([(#"i",#"i",332)], []), ([(#"t",#"t",333)], []), ([(#"e",#"e",334)], []), ([(#"r",#"r",335)], []), ([(#"a",#"a",336)], []), ([(#"l",#"l",337)], []), ([(#".",#".",338)], []), ([], [77]), ([(#"r",#"r",340)], []), ([(#"s",#"s",341)], []), ([(#"e",#"e",342)], []), ([(#" ",#" ",343)], []), ([(#"a",#"a",344)], []), ([(#"n",#"n",345)], []), ([(#" ",#" ",346)], []), ([(#"i",#"i",347)], []), ([(#"n",#"n",348)], []), ([(#"t",#"t",349)], []), ([(#"e",#"e",350)], []), ([(#"g",#"g",351)], []), ([(#"e",#"e",352)], []), ([(#"r",#"r",353)], []), ([(#" ",#" ",354)], []), ([(#"v",#"v",355)], []), ([(#"a",#"a",356)], []), ([(#"l",#"l",357)], []), ([(#"u",#"u",358)], []), ([(#"e",#"e",359)], []), ([(#" ",#" ",360)], []), ([(#"f",#"f",361)], []), ([(#"r",#"r",362)], []), ([(#"o",#"o",363)], []), ([(#"m",#"m",364)], []), ([(#" ",#" ",365)], []), ([(#"a",#"a",366)], []), ([(#"n",#"n",367)], []), ([(#" ",#" ",368)], []), ([(#"i",#"i",369)], []), ([(#"n",#"n",370)], []), ([(#"t",#"t",371)], []), ([(#" ",#" ",372)], []), ([(#"l",#"l",373)], []), ([(#"i",#"i",374)], []), ([(#"t",#"t",375)], []), ([(#"e",#"e",376)], []), ([(#"r",#"r",377)], []), ([(#"a",#"a",378)], []), ([(#"l",#"l",379)], []), ([], [75]), ([(#"s",#"s",381)], []), ([(#"t",#"t",382)], []), ([(#" ",#" ",383)], []), ([(#"i",#"i",384)], []), ([(#"g",#"g",385)], []), ([(#"n",#"n",386)], []), ([(#"o",#"o",387)], []), ([(#"r",#"r",388)], []), ([(#"e",#"e",389)], []), ([(#" ",#" ",390)], []), ([(#"s",#"s",391)], []), ([(#"p",#"p",392)], []), ([(#"a",#"a",393)], []), ([(#"c",#"c",394)], []), ([(#"e",#"e",395)], []), ([(#"s",#"s",396)], []), ([(#" ",#" ",397)], []), ([(#"o",#"o",398)], []), ([(#"r",#"r",399)], []), ([(#" ",#" ",400)], []), ([(#"t",#"t",401)], []), ([(#"a",#"a",402)], []), ([(#"b",#"b",403)], []), ([(#"s",#"s",404)], []), ([(#".",#".",405)], []), ([], [5]), ([(#"n",#"n",407)], []), ([(#"o",#"o",408)], []), ([(#"r",#"r",409)], []), ([(#"e",#"e",410)], []), ([(#" ",#" ",411)], []), ([(#"s",#"s",412)], []), ([(#"y",#"y",413)], []), ([(#"m",#"m",414)], []), ([(#"b",#"b",415)], []), ([(#"o",#"o",416)], []), ([(#"l",#"l",417)], []), ([(#"s",#"s",418)], []), ([(#" ",#" ",419)], []), ([(#"a",#"a",420)], []), ([(#"n",#"n",421)], []), ([(#"d",#"d",422)], []), ([(#" ",#" ",423)], []), ([(#"r",#"r",424)], []), ([(#"e",#"e",425)], []), ([(#"s",#"s",426)], []), ([(#"e",#"e",427)], []), ([(#"r",#"r",428)], []), ([(#"v",#"v",429)], []), ([(#"e",#"e",430)], []), ([(#"d",#"d",431)], []), ([(#" ",#" ",432)], []), ([(#"w",#"w",433)], []), ([(#"o",#"o",434)], []), ([(#"r",#"r",435)], []), ([(#"d",#"d",436)], []), ([(#"s",#"s",437)], []), ([(#" ",#" ",438)], []), ([(#"i",#"i",439)], []), ([(#"n",#"n",440)], []), ([(#" ",#" ",441)], []), ([(#"c",#"c",442)], []), ([(#"o",#"o",443)], []), ([(#"m",#"m",444)], []), ([(#"m",#"m",445)], []), ([(#"e",#"e",446)], []), ([(#"n",#"n",447)], []), ([(#"t",#"t",448)], []), ([(#"s",#"s",449)], []), ([(#".",#".",450)], []), ([], [14]), ([(#"r",#"r",452)], []), ([(#" ",#" ",453)], []), ([(#"w",#"w",454)], []), ([(#"h",#"h",455)], []), ([(#"e",#"e",456)], []), ([(#"n",#"n",457)], []), ([(#" ",#" ",458)], []), ([(#"l",#"l",459)], []), ([(#"e",#"e",460)], []), ([(#"x",#"x",461)], []), ([(#"i",#"i",462)], []), ([(#"n",#"n",463)], []), ([(#"g",#"g",464)], []), ([(#" ",#" ",465)], []), ([(#"g",#"g",466)], []), ([(#"o",#"o",467)], []), ([(#"e",#"e",468)], []), ([(#"s",#"s",469)], []), ([(#" ",#" ",470)], []), ([(#"w",#"w",471)], []), ([(#"r",#"r",472)], []), ([(#"o",#"o",473)], []), ([(#"n",#"n",474)], []), ([(#"g",#"g",475)], []), ([(#".",#".",476)], []), ([], [103]), ([(#"t",#"t",497)], []), ([(#"u",#"u",491)], []), ([(#"i",#"i",480)], []), ([(#"t",#"t",481)], []), ([(#" ",#" ",482)], []), ([(#"c",#"c",483)], []), ([(#"o",#"o",484)], []), ([(#"m",#"m",485)], []), ([(#"m",#"m",486)], []), ([(#"e",#"e",487)], []), ([(#"n",#"n",488)], []), ([(#"t",#"t",489)], []), ([(#".",#".",490)], []), ([], [12]), ([(#"a",#"a",492)], []), ([(#"l",#"l",493)], []), ([(#"i",#"i",494)], []), ([(#"t",#"t",495)], []), ([(#"y",#"y",496)], []), ([], [44]), ([(#"e",#"e",498)], []), ([(#"r",#"r",499)], []), ([(#" ",#" ",500)], []), ([(#"c",#"c",501),
(#"t",#"t",502)], []), ([(#"o",#"o",547)], []), ([(#"h",#"h",503)], []), ([(#"e",#"e",504)], []), ([(#" ",#" ",505)], []), ([(#"e",#"e",506)], []), ([(#"s",#"s",507)], []), ([(#"c",#"c",508)], []), ([(#"a",#"a",509)], []), ([(#"p",#"p",510)], []), ([(#"e",#"e",511)], []), ([(#" ",#" ",512)], []), ([(#"s",#"s",513)], []), ([(#"t",#"t",514)], []), ([(#"a",#"a",515)], []), ([(#"t",#"t",516)], []), ([(#"e",#"e",517)], []), ([(#" ",#" ",518)], []), ([(#"w",#"w",519)], []), ([(#"h",#"h",520)], []), ([(#"e",#"e",521)], []), ([(#"r",#"r",522)], []), ([(#"e",#"e",523)], []), ([(#" ",#" ",524)], []), ([(#"w",#"w",525)], []), ([(#"e",#"e",526)], []), ([(#" ",#" ",527)], []), ([(#"r",#"r",528)], []), ([(#"e",#"e",529)], []), ([(#"c",#"c",530)], []), ([(#"o",#"o",531)], []), ([(#"g",#"g",532)], []), ([(#"n",#"n",533)], []), ([(#"i",#"i",534)], []), ([(#"z",#"z",535)], []), ([(#"e",#"e",536)], []), ([(#" ",#" ",537)], []), ([(#"e",#"e",538)], []), ([(#"s",#"s",539)], []), ([(#"c",#"c",540)], []), ([(#"a",#"a",541)], []), ([(#"p",#"p",542)], []), ([(#"e",#"e",543)], []), ([(#" ",#" ",544)], []), ([(#"\"",#"\"",545)], []), ([(#" ",#" ",546)], []), ([], [82]), ([(#"m",#"m",548)], []), ([(#"m",#"m",549)], []), ([(#"e",#"e",550)], []), ([(#"n",#"n",551)], []), ([(#"t",#"t",552)], []), ([(#".",#".",553)], []), ([], [10]), ([(#"u",#"u",555)], []), ([(#"n",#"n",556)], []), ([(#"t",#"t",557)], []), ([(#" ",#" ",558)], []), ([(#"a",#"a",559)], []), ([(#"n",#"n",560)], []), ([(#"d",#"d",561)], []), ([(#" ",#" ",562)], []), ([(#"i",#"i",563)], []), ([(#"g",#"g",564)], []), ([(#"n",#"n",565)], []), ([(#"o",#"o",566)], []), ([(#"r",#"r",567)], []), ([(#"e",#"e",568)], []), ([(#" ",#" ",569)], []), ([(#"n",#"n",570)], []), ([(#"e",#"e",571)], []), ([(#"w",#"w",572)], []), ([(#"l",#"l",573)], []), ([(#"i",#"i",574)], []), ([(#"n",#"n",575)], []), ([(#"e",#"e",576)], []), ([(#"s",#"s",577)], []), ([(#".",#".",578)], []), ([], [3]), ([(#"o",#"o",580)], []), ([(#"l",#"l",581)], []), ([(#"e",#"e",582)], []), ([(#"a",#"a",583)], []), ([(#"n",#"n",584)], []), ([], [41]), ([(#"d",#"d",604)], []), ([(#"i",#"i",596)], []), ([(#"s",#"s",588)], []), ([(#"i",#"i",589)], []), ([(#"g",#"g",590)], []), ([(#"n",#"n",591)], []), ([(#"m",#"m",592)], []), ([(#"e",#"e",593)], []), ([(#"n",#"n",594)], []), ([(#"t",#"t",595)], []), ([], [39]), ([(#"t",#"t",597)], []), ([(#"h",#"h",598)], []), ([(#"m",#"m",599)], []), ([(#"e",#"e",600)], []), ([(#"t",#"t",601)], []), ([(#"i",#"i",602)], []), ([(#"c",#"c",603)], []), ([], [51]), ([(#" ",#" ",605)], []), ([(#"e",#"e",606)], []), ([(#"s",#"s",607)], []), ([(#"c",#"c",608)], []), ([(#"a",#"a",609)], []), ([(#"p",#"p",610)], []), ([(#"e",#"e",611)], []), ([(#" ",#" ",612)], []), ([(#"c",#"c",613)], []), ([(#"h",#"h",614)], []), ([(#"a",#"a",615)], []), ([(#"r",#"r",616)], []), ([(#"a",#"a",617)], []), ([(#"c",#"c",618)], []), ([(#"t",#"t",619)], []), ([(#"e",#"e",620)], []), ([(#"r",#"r",621)], []), ([(#"s",#"s",622)], []), ([(#" ",#" ",623)], []), ([(#"a",#"a",624)], []), ([(#"n",#"n",625)], []), ([(#"d",#"d",626)], []), ([(#" ",#" ",627)], []), ([(#"r",#"r",628)], []), ([(#"e",#"e",629)], []), ([(#"t",#"t",630)], []), ([(#"u",#"u",631)], []), ([(#"r",#"r",632)], []), ([(#"n",#"n",633)], []), ([(#" ",#" ",634)], []), ([(#"t",#"t",635)], []), ([(#"o",#"o",636)], []), ([(#" ",#" ",637)], []), ([(#"t",#"t",638)], []), ([(#"h",#"h",639)], []), ([(#"e",#"e",640)], []), ([(#" ",#" ",641)], []), ([(#"s",#"s",642)], []), ([(#"t",#"t",643)], []), ([(#"r",#"r",644)], []), ([(#"i",#"i",645)], []), ([(#"n",#"n",646)], []), ([(#"g",#"g",647)], []), ([(#" ",#" ",648)], []), ([(#"s",#"s",649)], []), ([(#"t",#"t",650)], []), ([(#"a",#"a",651)], []), ([(#"t",#"t",652)], []), ([(#"e",#"e",653)], []), ([(#".",#".",654)], []), ([], [85]), ([(#"=",#"=",656)], []), ([(#"=",#"=",657)], []), ([(#"=",#"=",658)], []), ([(#"=",#"=",659)], []), ([(#"=",#"=",660)], []), ([(#"=",#"=",661)], []), ([(#"=",#"=",662)], []), ([(#"=",#"=",663)], []), ([(#"=",#"=",664)], []), ([(#"=",#"=",665)], []), ([(#"=",#"=",666)], []), ([(#"=",#"=",667)], []), ([(#"=",#"=",668)], []), ([(#"=",#"=",669)], []), ([(#"=",#"=",670)], []), ([(#" ",#" ",671),
(#"=",#"=",672)], []), ([(#"L",#"L",986)], []), ([(#" ",#" ",673),
(#"=",#"=",674)], []), ([(#"B",#"B",950)], []), ([(#" ",#" ",675),
(#"=",#"=",676)], []), ([(#"R",#"R",915)], []), ([(#" ",#" ",677),
(#"=",#"=",678)], []), ([(#"B",#"B",813),
(#"I",#"I",814),
(#"W",#"W",815)], []), ([(#" ",#" ",679),
(#"=",#"=",680)], []), ([(#"C",#"C",747),
(#"P",#"P",748)], []), ([(#" ",#" ",681),
(#"=",#"=",682)], []), ([(#"O",#"O",715)], []), ([(#"=",#"=",683)], []), ([(#"=",#"=",684)], []), ([(#"=",#"=",685)], []), ([(#"=",#"=",686)], []), ([(#"=",#"=",687)], []), ([(#"=",#"=",688)], []), ([(#"=",#"=",689)], []), ([(#"=",#"=",690)], []), ([(#"=",#"=",691)], []), ([(#"=",#"=",692)], []), ([(#"=",#"=",693)], []), ([(#"=",#"=",694)], []), ([(#"=",#"=",695)], []), ([(#"=",#"=",696)], []), ([(#"=",#"=",697)], []), ([(#"=",#"=",698)], []), ([(#"=",#"=",699)], []), ([(#"=",#"=",700)], []), ([(#"=",#"=",701)], []), ([(#"=",#"=",702)], []), ([(#"=",#"=",703)], []), ([(#"=",#"=",704)], []), ([(#"=",#"=",705)], []), ([(#"=",#"=",706)], []), ([(#"=",#"=",707)], []), ([(#"=",#"=",708)], []), ([(#"=",#"=",709)], []), ([(#"=",#"=",710)], []), ([(#"=",#"=",711)], []), ([(#"=",#"=",712)], []), ([(#"=",#"=",713)], []), ([(#"=",#"=",714)], []), ([], [0, 2, 7, 9, 16, 18, 36, 38, 57, 59, 66, 68, 72, 74, 96, 98, 100, 102]), ([(#"p",#"p",716)], []), ([(#"e",#"e",717)], []), ([(#"r",#"r",718)], []), ([(#"a",#"a",719)], []), ([(#"t",#"t",720)], []), ([(#"o",#"o",721)], []), ([(#"r",#"r",722)], []), ([(#"s",#"s",723)], []), ([(#" ",#" ",724)], []), ([(#"=",#"=",725)], []), ([(#"=",#"=",726)], []), ([(#"=",#"=",727)], []), ([(#"=",#"=",728)], []), ([(#"=",#"=",729)], []), ([(#"=",#"=",730)], []), ([(#"=",#"=",731)], []), ([(#"=",#"=",732)], []), ([(#"=",#"=",733)], []), ([(#"=",#"=",734)], []), ([(#"=",#"=",735)], []), ([(#"=",#"=",736)], []), ([(#"=",#"=",737)], []), ([(#"=",#"=",738)], []), ([(#"=",#"=",739)], []), ([(#"=",#"=",740)], []), ([(#"=",#"=",741)], []), ([(#"=",#"=",742)], []), ([(#"=",#"=",743)], []), ([(#"=",#"=",744)], []), ([(#"=",#"=",745)], []), ([(#"=",#"=",746)], []), ([], [37]), ([(#"o",#"o",781)], []), ([(#"u",#"u",749)], []), ([(#"n",#"n",750)], []), ([(#"c",#"c",751)], []), ([(#"t",#"t",752)], []), ([(#"u",#"u",753)], []), ([(#"a",#"a",754)], []), ([(#"t",#"t",755)], []), ([(#"i",#"i",756)], []), ([(#"o",#"o",757)], []), ([(#"n",#"n",758)], []), ([(#" ",#" ",759)], []), ([(#"=",#"=",760)], []), ([(#"=",#"=",761)], []), ([(#"=",#"=",762)], []), ([(#"=",#"=",763)], []), ([(#"=",#"=",764)], []), ([(#"=",#"=",765)], []), ([(#"=",#"=",766)], []), ([(#"=",#"=",767)], []), ([(#"=",#"=",768)], []), ([(#"=",#"=",769)], []), ([(#"=",#"=",770)], []), ([(#"=",#"=",771)], []), ([(#"=",#"=",772)], []), ([(#"=",#"=",773)], []), ([(#"=",#"=",774)], []), ([(#"=",#"=",775)], []), ([(#"=",#"=",776)], []), ([(#"=",#"=",777)], []), ([(#"=",#"=",778)], []), ([(#"=",#"=",779)], []), ([(#"=",#"=",780)], []), ([], [67]), ([(#"m",#"m",782)], []), ([(#"m",#"m",783)], []), ([(#"e",#"e",784)], []), ([(#"n",#"n",785)], []), ([(#"t",#"t",786)], []), ([(#"s",#"s",787)], []), ([(#" ",#" ",788)], []), ([(#"=",#"=",789)], []), ([(#"=",#"=",790)], []), ([(#"=",#"=",791)], []), ([(#"=",#"=",792)], []), ([(#"=",#"=",793)], []), ([(#"=",#"=",794)], []), ([(#"=",#"=",795)], []), ([(#"=",#"=",796)], []), ([(#"=",#"=",797)], []), ([(#"=",#"=",798)], []), ([(#"=",#"=",799)], []), ([(#"=",#"=",800)], []), ([(#"=",#"=",801)], []), ([(#"=",#"=",802)], []), ([(#"=",#"=",803)], []), ([(#"=",#"=",804)], []), ([(#"=",#"=",805)], []), ([(#"=",#"=",806)], []), ([(#"=",#"=",807)], []), ([(#"=",#"=",808)], []), ([(#"=",#"=",809)], []), ([(#"=",#"=",810)], []), ([(#"=",#"=",811)], []), ([(#"=",#"=",812)], []), ([], [8]), ([(#"u",#"u",882)], []), ([(#"d",#"d",849)], []), ([(#"h",#"h",816)], []), ([(#"i",#"i",817)], []), ([(#"t",#"t",818)], []), ([(#"e",#"e",819)], []), ([(#" ",#" ",820)], []), ([(#"S",#"S",821)], []), ([(#"p",#"p",822)], []), ([(#"a",#"a",823)], []), ([(#"c",#"c",824)], []), ([(#"e",#"e",825)], []), ([(#" ",#" ",826)], []), ([(#"=",#"=",827)], []), ([(#"=",#"=",828)], []), ([(#"=",#"=",829)], []), ([(#"=",#"=",830)], []), ([(#"=",#"=",831)], []), ([(#"=",#"=",832)], []), ([(#"=",#"=",833)], []), ([(#"=",#"=",834)], []), ([(#"=",#"=",835)], []), ([(#"=",#"=",836)], []), ([(#"=",#"=",837)], []), ([(#"=",#"=",838)], []), ([(#"=",#"=",839)], []), ([(#"=",#"=",840)], []), ([(#"=",#"=",841)], []), ([(#"=",#"=",842)], []), ([(#"=",#"=",843)], []), ([(#"=",#"=",844)], []), ([(#"=",#"=",845)], []), ([(#"=",#"=",846)], []), ([(#"=",#"=",847)], []), ([(#"=",#"=",848)], []), ([], [1]), ([(#"e",#"e",850)], []), ([(#"n",#"n",851)], []), ([(#"t",#"t",852)], []), ([(#"i",#"i",853)], []), ([(#"f",#"f",854)], []), ([(#"i",#"i",855)], []), ([(#"e",#"e",856)], []), ([(#"r",#"r",857)], []), ([(#"s",#"s",858)], []), ([(#" ",#" ",859)], []), ([(#"=",#"=",860)], []), ([(#"=",#"=",861)], []), ([(#"=",#"=",862)], []), ([(#"=",#"=",863)], []), ([(#"=",#"=",864)], []), ([(#"=",#"=",865)], []), ([(#"=",#"=",866)], []), ([(#"=",#"=",867)], []), ([(#"=",#"=",868)], []), ([(#"=",#"=",869)], []), ([(#"=",#"=",870)], []), ([(#"=",#"=",871)], []), ([(#"=",#"=",872)], []), ([(#"=",#"=",873)], []), ([(#"=",#"=",874)], []), ([(#"=",#"=",875)], []), ([(#"=",#"=",876)], []), ([(#"=",#"=",877)], []), ([(#"=",#"=",878)], []), ([(#"=",#"=",879)], []), ([(#"=",#"=",880)], []), ([(#"=",#"=",881)], []), ([], [97]), ([(#"i",#"i",883)], []), ([(#"l",#"l",884)], []), ([(#"t",#"t",885)], []), ([(#"-",#"-",886)], []), ([(#"i",#"i",887)], []), ([(#"n",#"n",888)], []), ([(#" ",#" ",889)], []), ([(#"t",#"t",890)], []), ([(#"y",#"y",891)], []), ([(#"p",#"p",892)], []), ([(#"e",#"e",893)], []), ([(#"s",#"s",894)], []), ([(#" ",#" ",895)], []), ([(#"=",#"=",896)], []), ([(#"=",#"=",897)], []), ([(#"=",#"=",898)], []), ([(#"=",#"=",899)], []), ([(#"=",#"=",900)], []), ([(#"=",#"=",901)], []), ([(#"=",#"=",902)], []), ([(#"=",#"=",903)], []), ([(#"=",#"=",904)], []), ([(#"=",#"=",905)], []), ([(#"=",#"=",906)], []), ([(#"=",#"=",907)], []), ([(#"=",#"=",908)], []), ([(#"=",#"=",909)], []), ([(#"=",#"=",910)], []), ([(#"=",#"=",911)], []), ([(#"=",#"=",912)], []), ([(#"=",#"=",913)], []), ([(#"=",#"=",914)], []), ([], [73]), ([(#"e",#"e",916)], []), ([(#"s",#"s",917)], []), ([(#"e",#"e",918)], []), ([(#"r",#"r",919)], []), ([(#"v",#"v",920)], []), ([(#"e",#"e",921)], []), ([(#"d",#"d",922)], []), ([(#" ",#" ",923)], []), ([(#"W",#"W",924)], []), ([(#"o",#"o",925)], []), ([(#"r",#"r",926)], []), ([(#"d",#"d",927)], []), ([(#"s",#"s",928)], []), ([(#" ",#" ",929)], []), ([(#"=",#"=",930)], []), ([(#"=",#"=",931)], []), ([(#"=",#"=",932)], []), ([(#"=",#"=",933)], []), ([(#"=",#"=",934)], []), ([(#"=",#"=",935)], []), ([(#"=",#"=",936)], []), ([(#"=",#"=",937)], []), ([(#"=",#"=",938)], []), ([(#"=",#"=",939)], []), ([(#"=",#"=",940)], []), ([(#"=",#"=",941)], []), ([(#"=",#"=",942)], []), ([(#"=",#"=",943)], []), ([(#"=",#"=",944)], []), ([(#"=",#"=",945)], []), ([(#"=",#"=",946)], []), ([(#"=",#"=",947)], []), ([(#"=",#"=",948)], []), ([(#"=",#"=",949)], []), ([], [17]), ([(#"r",#"r",951)], []), ([(#"a",#"a",952)], []), ([(#"c",#"c",953)], []), ([(#"e",#"e",954)], []), ([(#"s",#"s",955)], []), ([(#" ",#" ",956)], []), ([(#"a",#"a",957)], []), ([(#"n",#"n",958)], []), ([(#"d",#"d",959)], []), ([(#" ",#" ",960)], []), ([(#"P",#"P",961)], []), ([(#"a",#"a",962)], []), ([(#"r",#"r",963)], []), ([(#"e",#"e",964)], []), ([(#"n",#"n",965)], []), ([(#"s",#"s",966)], []), ([(#" ",#" ",967)], []), ([(#"=",#"=",968)], []), ([(#"=",#"=",969)], []), ([(#"=",#"=",970)], []), ([(#"=",#"=",971)], []), ([(#"=",#"=",972)], []), ([(#"=",#"=",973)], []), ([(#"=",#"=",974)], []), ([(#"=",#"=",975)], []), ([(#"=",#"=",976)], []), ([(#"=",#"=",977)], []), ([(#"=",#"=",978)], []), ([(#"=",#"=",979)], []), ([(#"=",#"=",980)], []), ([(#"=",#"=",981)], []), ([(#"=",#"=",982)], []), ([(#"=",#"=",983)], []), ([(#"=",#"=",984)], []), ([(#"=",#"=",985)], []), ([], [58]), ([(#"a",#"a",987)], []), ([(#"s",#"s",988)], []), ([(#"t",#"t",989)], []), ([(#" ",#" ",990)], []), ([(#"c",#"c",991)], []), ([(#"h",#"h",992)], []), ([(#"a",#"a",993)], []), ([(#"n",#"n",994)], []), ([(#"c",#"c",995)], []), ([(#"e",#"e",996)], []), ([(#" ",#" ",997)], []), ([(#"e",#"e",998)], []), ([(#"r",#"r",999)], []), ([(#"r",#"r",1000)], []), ([(#"o",#"o",1001)], []), ([(#"r",#"r",1002)], []), ([(#"s",#"s",1003)], []), ([(#" ",#" ",1004)], []), ([(#"=",#"=",1005)], []), ([(#"=",#"=",1006)], []), ([(#"=",#"=",1007)], []), ([(#"=",#"=",1008)], []), ([(#"=",#"=",1009)], []), ([(#"=",#"=",1010)], []), ([(#"=",#"=",1011)], []), ([(#"=",#"=",1012)], []), ([(#"=",#"=",1013)], []), ([(#"=",#"=",1014)], []), ([(#"=",#"=",1015)], []), ([(#"=",#"=",1016)], []), ([(#"=",#"=",1017)], []), ([(#"=",#"=",1018)], []), ([(#"=",#"=",1019)], []), ([(#"=",#"=",1020)], []), ([(#"=",#"=",1021)], []), ([(#"=",#"=",1022)], []), ([], [101])]
    fun mk yyins = let
        (* current start state *)
        val yyss = ref INITIAL
	fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
        val yystrm = ref yyins
	(* get one char of input *)
	val yygetc = yyInput.getc
	(* create yytext *)
	fun yymktext(strm) = yyInput.subtract (strm, !yystrm)
        open UserDeclarations
        fun lex 
(yyarg as ()) = let 
     fun continue() = let
            val yylastwasn = yyInput.lastWasNL (!yystrm)
            fun yystuck (yyNO_MATCH) = raise Fail "stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yyInput.getpos (!yystrm)
	    val yygetlineNo = yyInput.getlineNo
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = List.map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    in 
let
fun yyAction0 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction1 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction2 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction3 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction4 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lineNum := !lineNum + 1;
            linePos := yypos :: !linePos;
            continue ()))
fun yyAction5 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction6 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction7 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction8 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction9 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction10 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction11 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN COMMENT; inComment := true; continue ()))
fun yyAction12 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction13 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; inComment := false; continue ()))
fun yyAction14 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction15 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction16 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction17 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction18 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction19 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.WHILE (s_e yypos yytext))
      end
fun yyAction20 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.FOR (s_e yypos yytext))
      end
fun yyAction21 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.TO (s_e yypos yytext))
      end
fun yyAction22 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.BREAK (s_e yypos yytext))
      end
fun yyAction23 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LET (s_e yypos yytext))
      end
fun yyAction24 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.IN (s_e yypos yytext))
      end
fun yyAction25 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.END (s_e yypos yytext))
      end
fun yyAction26 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.FUNCTION (s_e yypos yytext))
      end
fun yyAction27 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.VAR (s_e yypos yytext))
      end
fun yyAction28 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.TYPE (s_e yypos yytext))
      end
fun yyAction29 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.ARRAY (s_e yypos yytext))
      end
fun yyAction30 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.IF (s_e yypos yytext))
      end
fun yyAction31 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.THEN (s_e yypos yytext))
      end
fun yyAction32 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.ELSE (s_e yypos yytext))
      end
fun yyAction33 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.DO (s_e yypos yytext))
      end
fun yyAction34 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.OF (s_e yypos yytext))
      end
fun yyAction35 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.NIL (s_e yypos yytext))
      end
fun yyAction36 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction37 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction38 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction39 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction40 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.ASSIGN (s_e yypos yytext))
      end
fun yyAction41 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction42 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.OR (s_e yypos yytext))
      end
fun yyAction43 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.AND (s_e yypos yytext))
      end
fun yyAction44 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction45 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.GE (s_e yypos yytext))
      end
fun yyAction46 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.GT (s_e yypos yytext))
      end
fun yyAction47 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LE (s_e yypos yytext))
      end
fun yyAction48 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LT (s_e yypos yytext))
      end
fun yyAction49 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.NEQ (s_e yypos yytext))
      end
fun yyAction50 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.EQ (s_e yypos yytext))
      end
fun yyAction51 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction52 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.DIVIDE (s_e yypos yytext))
      end
fun yyAction53 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.TIMES (s_e yypos yytext))
      end
fun yyAction54 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.MINUS (s_e yypos yytext))
      end
fun yyAction55 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.PLUS (s_e yypos yytext))
      end
fun yyAction56 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.DOT (s_e yypos yytext))
      end
fun yyAction57 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction58 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction59 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction60 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LBRACE (s_e yypos yytext))
      end
fun yyAction61 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.RBRACE (s_e yypos yytext))
      end
fun yyAction62 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LBRACK (s_e yypos yytext))
      end
fun yyAction63 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.RBRACK (s_e yypos yytext))
      end
fun yyAction64 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LPAREN (s_e yypos yytext))
      end
fun yyAction65 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.RPAREN (s_e yypos yytext))
      end
fun yyAction66 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction67 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction68 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction69 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.SEMICOLON (s_e yypos yytext))
      end
fun yyAction70 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.COLON (s_e yypos yytext))
      end
fun yyAction71 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.COMMA (s_e yypos yytext))
      end
fun yyAction72 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction73 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction74 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction75 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction76 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (let val (s, e) = s_e yypos yytext
                        in  Tokens.INT (valOf (Int.fromString yytext), s, e)
                        end)
      end
fun yyAction77 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction78 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN STRING; continue ()))
fun yyAction79 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction80 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction81 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (currentString := !currentString ^ yytext;
                      continue ())
      end
fun yyAction82 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction83 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction84 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN ESCAPE; continue ()))
fun yyAction85 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction86 (strm, lastMatch : yymatch) = (yystrm := strm;
      (currentString := !currentString ^ "\n"; 
                YYBEGIN STRING; 
                continue ()))
fun yyAction87 (strm, lastMatch : yymatch) = (yystrm := strm;
      (currentString := !currentString ^ "\t"; 
                YYBEGIN STRING; 
                continue ()))
fun yyAction88 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (let val newChar = (Char.toString 
                                                  (chr 
                                                    (valOf 
                                                      (Int.fromString yytext))))
                              in currentString := !currentString ^ newChar
                              end; YYBEGIN STRING; continue())
      end
fun yyAction89 (strm, lastMatch : yymatch) = (yystrm := strm;
      (currentString := !currentString ^ "\"";
                  YYBEGIN STRING;
                  continue ()))
fun yyAction90 (strm, lastMatch : yymatch) = (yystrm := strm;
      (currentString := !currentString ^ "\\";
                YYBEGIN STRING;
                continue ()))
fun yyAction91 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN STRING; continue ()))
fun yyAction92 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (let val ctrlChr = (String.str 
                                                       (valOf 
                                                         (Char.fromString 
                                                           ("\\" ^ yytext))))
                                   in  currentString := !currentString ^ ctrlChr
                                   end; YYBEGIN STRING; continue ())
      end
fun yyAction93 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction94 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction95 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL;
                  let val (s, e) = s_e yypos yytext;
                      val text   = !currentString
                  in  currentString := "";
                      Tokens.STRING (text, e - (String.size (text)), e)
                  end)
      end
fun yyAction96 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction97 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction98 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction99 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (let val (s, e) = s_e yypos yytext
                                      in  Tokens.ID (yytext, s, e)
                                      end)
      end
fun yyAction100 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction101 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction102 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction103 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction104 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (ErrorMsg.error yypos ("illegal character " ^ yytext
                              ^ "(ASCII "
                              ^ (Int.toString
                                  (Char.ord (hd (String.explode yytext)))) 
                              ^ ")"); 
        continue ())
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36, yyAction37, yyAction38, yyAction39, yyAction40,
  yyAction41, yyAction42, yyAction43, yyAction44, yyAction45, yyAction46,
  yyAction47, yyAction48, yyAction49, yyAction50, yyAction51, yyAction52,
  yyAction53, yyAction54, yyAction55, yyAction56, yyAction57, yyAction58,
  yyAction59, yyAction60, yyAction61, yyAction62, yyAction63, yyAction64,
  yyAction65, yyAction66, yyAction67, yyAction68, yyAction69, yyAction70,
  yyAction71, yyAction72, yyAction73, yyAction74, yyAction75, yyAction76,
  yyAction77, yyAction78, yyAction79, yyAction80, yyAction81, yyAction82,
  yyAction83, yyAction84, yyAction85, yyAction86, yyAction87, yyAction88,
  yyAction89, yyAction90, yyAction91, yyAction92, yyAction93, yyAction94,
  yyAction95, yyAction96, yyAction97, yyAction98, yyAction99, yyAction100,
  yyAction101, yyAction102, yyAction103, yyAction104])
in
  if yyInput.eof(!(yystrm))
    then UserDeclarations.eof(yyarg)
    else (case (!(yyss))
       of INITIAL => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
        | ESCAPE => yygo yyactTable (1, !(yystrm), yyNO_MATCH)
        | STRING => yygo yyactTable (2, !(yystrm), yyNO_MATCH)
        | COMMENT => yygo yyactTable (3, !(yystrm), yyNO_MATCH)
        | REM => yygo yyactTable (4, !(yystrm), yyNO_MATCH)
      (* end case *))
end
            end
	  in 
            continue() 	  
	    handle IO.Io{cause, ...} => raise cause
          end
        in 
          lex 
        end
    in
    fun makeLexer yyinputN = mk (yyInput.mkStream yyinputN)
    end

  end
