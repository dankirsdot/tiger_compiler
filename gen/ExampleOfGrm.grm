structure A = Absyn
fun 3 = x;
%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS 

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

(* %prefer THEN ELSE LPAREN *)
%nodefault

%value ID (" ")
%value INT (1)
%value STRING ("")

%nonterm  exp of A.exp
        | program of A.exp 
        | decs of A.dec list
        | dec of A.dec
        | tydec of A.dec
        | vardec of A.dec
        | fundec of A.dec
        | ty of A.ty
        | tyfields of A.field list
        | lvalue of A.var
        | expseq of (A.exp * pos) list
        | varexp of A.exp
        | tyafields of (A.symbol * A.exp * pos) list
        | funclist of A.exp list

%nonassoc ELSE
%nonassoc ASSIGN
          DO
%left     OR
%left     AND
%nonassoc EQ NEQ GT GE LT LE 
%left     PLUS MINUS
%left     TIMES DIVIDE
%left     UMINUS

%%

program	: exp				                   (exp)

expseq: exp SEMICOLON expseq           ((exp, expleft) :: expseq)
      | exp                            ((exp, expleft) :: [])
      |                                ([])

decs: dec decs                        (dec :: decs)
    |                                  ([])

dec: tydec                             (tydec)
   | vardec                            (vardec)
   | fundec                            (fundec)

tydec: TYPE ID EQ ty                   (A.TypeDec[{name=Symbol.symbol(ID), ty=ty, pos=TYPEleft}])

ty: ID                                 (A.NameTy(Symbol.symbol(ID), IDleft))
  | ARRAY OF ID                        (A.ArrayTy(Symbol.symbol(ID), ARRAYleft))
  | LBRACE tyfields RBRACE             (A.RecordTy(tyfields))

varexp: ID LBRACK exp RBRACK OF varexp (A.ArrayExp{typ=Symbol.symbol(ID), size=exp, init=varexp, pos=IDleft})
      | exp                            (exp)
	
exp: LET decs IN expseq END			       (A.LetExp{decs=decs, body=A.SeqExp(expseq), pos=LETleft})
   | INT                               (A.IntExp(INT))
   | STRING                            (A.StringExp(STRING, STRINGleft))
   | NIL                               (A.NilExp)
   | BREAK                             (A.BreakExp(BREAKleft))
   | lvalue ASSIGN exp                 (A.AssignExp{var=lvalue, exp=exp, pos=ASSIGNleft})
   | lvalue                            (A.VarExp(lvalue))
   | IF exp THEN exp ELSE exp          (A.IfExp{test=exp1, then'=exp2, else'=SOME exp3, pos=IFleft})
   | IF exp THEN exp %prec IF          (A.IfExp{test=exp1, then'=exp2, else'=NONE, pos=IFleft})
   | WHILE exp DO exp                  (A.WhileExp{test=exp1, body=exp2, pos=WHILEleft})
   | FOR ID ASSIGN exp TO exp DO exp   (A.ForExp{var=Symbol.symbol(ID), escape=ref true, lo=exp1, hi=exp2, body=exp3, pos=FORleft})
   | ID LPAREN funclist RPAREN         (A.CallExp{func=Symbol.symbol(ID), args=funclist, pos=IDleft})
   | ID LBRACE tyafields RBRACE        (A.RecordExp{fields=tyafields, typ=Symbol.symbol(ID), pos=IDleft})
   | exp AND exp                       (A.IfExp{test=exp1, then'=exp2, else'=SOME (A.IntExp(0)), pos=ANDleft})
   | exp OR exp                        (A.IfExp{test=exp1, then'=A.IntExp(1), else'=SOME exp2, pos=ORleft})
   | exp EQ exp                        (A.OpExp{left=exp1, oper=A.EqOp, right=exp2, pos=EQleft})
   | exp NEQ exp                       (A.OpExp{left=exp1, oper=A.NeqOp, right=exp2, pos=NEQleft})
   | exp PLUS exp                      (A.OpExp{left=exp1, oper=A.PlusOp, right=exp2, pos=PLUSleft})
   | exp MINUS exp                     (A.OpExp{left=exp1, oper=A.MinusOp, right=exp2, pos=MINUSleft})
   | exp TIMES exp                     (A.OpExp{left=exp1, oper=A.TimesOp, right=exp2, pos=TIMESleft})
   | exp DIVIDE exp                    (A.OpExp{left=exp1, oper=A.DivideOp, right=exp2, pos=DIVIDEleft})
   | exp GE exp                        (A.OpExp{left=exp1, oper=A.GeOp, right=exp2, pos=GEleft})
   | exp GT exp                        (A.OpExp{left=exp1, oper=A.GtOp, right=exp2, pos=GTleft})
   | exp LE exp                        (A.OpExp{left=exp1, oper=A.LeOp, right=exp2, pos=LEleft})
   | exp LT exp                        (A.OpExp{left=exp1, oper=A.LtOp, right=exp2, pos=LTleft})
   | LPAREN expseq RPAREN              (A.SeqExp(expseq))
   | MINUS exp %prec UMINUS            (A.OpExp{left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft})

funclist: exp COMMA funclist             (exp :: funclist)
        | exp                            (exp :: [])
        |                                ([])

tyfields: ID COLON ID COMMA tyfields     ({name=Symbol.symbol(ID1), escape=ref true, typ=Symbol.symbol(ID2), pos=ID1left} :: tyfields)
        | ID COLON ID                    ({name=Symbol.symbol(ID1), escape=ref true, typ=Symbol.symbol(ID2), pos=ID1left} :: [])
        |                                ([])

tyafields: ID EQ varexp COMMA tyafields  ((Symbol.symbol(ID), varexp, IDleft) :: tyafields)
        | ID EQ varexp                   ((Symbol.symbol(ID), varexp, IDleft) :: [])
        |                                ([])

vardec: VAR ID COLON ID ASSIGN varexp    (A.VarDec{name=Symbol.symbol(ID1), escape=ref true, typ=SOME (Symbol.symbol(ID2), ID2left), init=varexp, pos=VARleft})
      | VAR ID ASSIGN varexp             (A.VarDec{name=Symbol.symbol(ID), escape=ref true, typ=NONE, init=varexp, pos=VARleft})

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp          (A.FunctionDec[{name=Symbol.symbol(ID), params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft}])
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp (A.FunctionDec [{name=Symbol.symbol(ID1), params=tyfields, result=SOME (Symbol.symbol(ID2), ID2left), body=exp, pos=FUNCTIONleft}])

lvalue: lvalue DOT ID                    (A.FieldVar(lvalue, Symbol.symbol(ID), DOTleft))
      | ID                               (A.SimpleVar(Symbol.symbol(ID), IDleft))
      | ID LBRACK exp RBRACK             (A.SubscriptVar(A.SimpleVar(Symbol.symbol(ID), IDleft), exp, LBRACKleft))
      | lvalue DOT ID LBRACK exp RBRACK  (A.SubscriptVar(A.FieldVar(lvalue, Symbol.symbol(ID), DOTleft), exp, LBRACKleft))